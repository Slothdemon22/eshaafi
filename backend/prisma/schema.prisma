// This tells Prisma how to connect to your database
datasource db {
  provider = "postgresql" // or "mysql" / "sqlite" depending on your DB
  url      = env("DATABASE_URL")
}

// This tells Prisma to generate the client in node_modules
generator client {
  provider = "prisma-client-js"
}




enum Role {
  PATIENT
  DOCTOR
  ADMIN
  CLINIC_ADMIN
  SUPER_ADMIN
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  role     Role     @default(PATIENT)

  doctor   Doctor?
  bookings Booking[] @relation("PatientBookings")
  reviews  Review[]
  clinicAdmins ClinicAdmin[]
}

enum Speciality {
  GENERAL_DOCTOR
  PEDIATRICS
  CARDIOLOGY
  DERMATOLOGY
  NEUROLOGY
  ORTHOPEDICS
  OPHTHALMOLOGY
  ENT
  GYNECOLOGY
  UROLOGY
  GASTROENTEROLOGY
  ENDOCRINOLOGY
  ONCOLOGY
  PSYCHIATRY
  PULMONOLOGY
  RHEUMATOLOGY
  DENTIST
  PHYSIOTHERAPIST
  DIET_NUTRITION
}

model Doctor {
  id         Int               @id @default(autoincrement())
  location   String
  specialty  Speciality
  userId     Int               @unique
  user       User              @relation(fields: [userId], references: [id])
  bookings   Booking[]         @relation("DoctorBookings")
  slots      AvailabilitySlot[] // Doctor's available time slots
  online     Boolean           @default(false) 
  active     Boolean           @default(true)
  education  Json              @default("[]") 
  workExperience Json?         // Array of work experience entries
  reviews    Review[]
  clinicId   Int?
  clinic     Clinic?           @relation(fields: [clinicId], references: [id])
}

model AvailabilitySlot {
  id          Int       @id @default(autoincrement())
  doctorId    Int
  doctor      Doctor    @relation(fields: [doctorId], references: [id])
  date        DateTime  // Specific date for availability
  startTime   String    // e.g., "09:00"
  endTime     String    // e.g., "09:30"
  duration    Int       // Duration in minutes (e.g., 30 or 60)
  location    String?   // Location for this slot (optional)
  custom      Boolean   @default(false) // Custom slot flag
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([doctorId, date, startTime, endTime]) // Ensure unique slots per doctor per date
}

enum BookingStatus {
  PENDING
  BOOKED
  REJECTED
  COMPLETED
}

enum AppointmentType {
  VIRTUAL
  PHYSICAL
}

model Booking {
  id        Int           @id @default(autoincrement())
  dateTime  DateTime
  doctorId  Int
  patientId Int
  status    BookingStatus @default(PENDING)
  reason    String?
  symptoms  String?
  rejectionReason String? // Added field for doctor's rejection reason
  type      AppointmentType @default(PHYSICAL)
  videoRoomId String? // 100ms room ID for virtual appointments
  // Follow-up relation
  followUpOfId Int?
  followUpOf   Booking?      @relation("BookingFollowUp", fields: [followUpOfId], references: [id])
  followUps    Booking[]     @relation("BookingFollowUp")

  doctor    Doctor        @relation("DoctorBookings", fields: [doctorId], references: [id])
  patient   User          @relation("PatientBookings", fields: [patientId], references: [id])
  prescription Prescription?
  review    Review?
}

model Prescription {
  id          Int      @id @default(autoincrement())
  bookingId   Int      @unique
  booking     Booking  @relation(fields: [bookingId], references: [id])
  medications String   // JSON string of medications
  dosage      String   // Dosage instructions
  frequency   String   // How often to take
  duration    String   // How long to take
  notes       String?  // Additional notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

   model DoctorApplication {
     id                Int                @id @default(autoincrement())
     name              String
     email             String
     phone             String?
     location          String
     specialty         Speciality
     experienceYears   Int?
     credentials       String?
     education         Json             
     workExperience    Json?              
     status            ApplicationStatus  @default(PENDING)
     generatedPassword String?
     createdAt         DateTime           @default(now())
     updatedAt         DateTime           @updatedAt
     clinicId          Int?
     clinic            Clinic?            @relation(fields: [clinicId], references: [id])
   }

model Review {
  id                  Int       @id @default(autoincrement())
  doctorId            Int
  patientId           Int
  appointmentId       Int       @unique
  behaviourRating     Int       // 1-5
  recommendationRating Int      // 1-5
  reviewText          String?
  createdAt           DateTime  @default(now())

  doctor    Doctor    @relation(fields: [doctorId], references: [id])
  patient   User      @relation(fields: [patientId], references: [id])
  appointment Booking @relation(fields: [appointmentId], references: [id])

  @@unique([patientId, appointmentId]) // Only one review per appointment per patient
}

// Clinic related models

model ClinicApplication {
  id          Int               @id @default(autoincrement())
  name        String
  email       String
  phone       String?
  addressLine1 String
  addressLine2 String?
  city        String
  state       String?
  country     String
  zip         String?
  website     String?
  description String?
  status      ApplicationStatus @default(PENDING)
  generatedPassword String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Clinic {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  phone       String?
  addressLine1 String
  addressLine2 String?
  city        String
  state       String?
  country     String
  zip         String?
  website     String?
  logoUrl     String?
  description String?
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  admins      ClinicAdmin[]
  doctors     Doctor[]
  doctorApplications DoctorApplication[]
}

model ClinicAdmin {
  id        Int    @id @default(autoincrement())
  clinicId  Int
  userId    Int    @unique

  clinic    Clinic @relation(fields: [clinicId], references: [id])
  user      User   @relation(fields: [userId], references: [id])
}
